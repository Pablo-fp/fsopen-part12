version: '3.8'

services:
  # Nginx Reverse Proxy Service
  nginx:
    image: nginx:stable-alpine # Use a stable Nginx image
    container_name: todo-nginx-proxy-dev
    ports:
      # Map host port 80 to container port 80 (Nginx entry point)
      # If port 80 is busy on your host, change the host port (e.g., "8080:80")
      - '80:80'
    volumes:
      # Mount the custom Nginx config into the container
      - ./nginx.dev.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      # Wait for backend and frontend services to start
      - backend
      - frontend
    networks:
      - todo-dev-network

  # Frontend Development Service (using Node image directly for dev server)
  frontend:
    image: node:18-alpine
    container_name: todo-frontend-dev-top
    working_dir: /app
    environment:
      # Frontend needs to make requests to /api/* which Nginx will route
      - VITE_BACKEND_URL=/api
      # For detecting file changes within the container volume
      - CHOKIDAR_USEPOLLING=true
    volumes:
      # Mount frontend source code from host
      - ./todo-frontend:/app
      # Use named volume for node_modules isolation
      - frontend_node_modules_dev:/app/node_modules
    # Command to start Vite dev server, listening on all interfaces
    command: sh -c "cd /app && npm install && npm run dev -- --host" # Ensure deps are installed first
    networks:
      - todo-dev-network
    # Don't expose ports directly to host, Nginx handles access
    # Keep interactive for dev server
    stdin_open: true
    tty: true

  # Backend Development Service (defined similar to Ex 12.16)
  backend:
    # Build using the specific dev Dockerfile in the backend directory
    build:
      context: ./todo-backend
      dockerfile: dev.Dockerfile
    container_name: todo-backend-dev-top
    volumes:
      # Mount backend source code from host
      - ./todo-backend:/usr/src/app
      # Use named volume for node_modules isolation
      - backend_node_modules_dev:/usr/src/app/node_modules
    environment:
      # Connect to other services using their service names
      - REDIS_URL=redis://redis:6379
      - MONGO_URL=mongodb://root:example@mongo:27017/the_database?authSource=admin
      - NODE_ENV=development
    depends_on:
      - mongo
      - redis
    networks:
      - todo-dev-network
    # Don't expose ports directly to host, Nginx handles access
    # Keep interactive for Nodemon
    stdin_open: true
    tty: true

  # MongoDB Service (as defined in backend's dev compose)
  mongo:
    image: mongo:latest
    container_name: todo-mongo-dev-top
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
    volumes:
      - mongo_data_dev:/data/db
    # Port kept for potential direct host debugging, not needed for app function
    ports:
      - '127.0.0.1:27017:27017'
    restart: unless-stopped
    networks:
      - todo-dev-network

  # Redis Service (as defined in backend's dev compose)
  redis:
    image: redis:alpine
    container_name: todo-redis-dev-top
    volumes:
      - redis_data_dev:/data
    # Port kept for potential direct host debugging, not needed for app function
    ports:
      - '127.0.0.1:6379:6379'
    restart: unless-stopped
    networks:
      - todo-dev-network

# Define the network for inter-service communication
networks:
  todo-dev-network:
    driver: bridge

# Declare named volumes for node_modules and data persistence
volumes:
  frontend_node_modules_dev:
  backend_node_modules_dev:
  mongo_data_dev:
  redis_data_dev:
