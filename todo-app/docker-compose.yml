# todo-app/docker-compose.yml
version: '3.8'

services:
  # Nginx Reverse Proxy and Static File Server
  nginx:
    image: nginx:stable-alpine
    container_name: todo-nginx-prod
    ports:
      # Map host port 80 to container port 80 (standard HTTP port)
      # Change host port (e.g., "8080:80") if port 80 is already in use on your host
      - '80:80'
    volumes:
      # Mount the production Nginx configuration
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      # Mount the built frontend static files from the host into Nginx's web root
      # IMPORTANT: This requires './todo-frontend/dist' to exist on the host first!
      - ./todo-frontend/dist:/usr/share/nginx/html:ro
    depends_on:
      - backend # Nginx needs the backend to be available for proxying
    restart: unless-stopped
    networks:
      - todo-prod-network

  # Backend Application Service (Production Mode)
  backend:
    # Build the backend image using its production Dockerfile
    build:
      context: ./todo-backend
      dockerfile: Dockerfile # Use the standard Dockerfile (prod version)
    container_name: todo-backend-prod
    environment:
      # --- Production Database URLs using service names ---
      # Replace 'prod_db_user' & 'prod_db_password' with actual secure credentials if set
      # Using 'root/example' here for consistency with dev, BUT USE SECURE CREDS FOR REAL PROD
      - MONGO_URL=mongodb://root:example@mongo:27017/the_prod_database?authSource=admin
      - REDIS_URL=redis://redis:6379
      - NODE_ENV=production # Ensure Node runs in production mode
    depends_on:
      - mongo
      - redis
    restart: unless-stopped
    networks:
      - todo-prod-network
    # No ports exposed directly; access is via Nginx

  # MongoDB Database Service
  mongo:
    image: mongo:latest
    container_name: todo-mongo-prod
    environment:
      # Set credentials here for MongoDB initialization
      # USE STRONG, SECURE PASSWORDS IN A REAL PRODUCTION ENVIRONMENT
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
      # - MONGO_INITDB_DATABASE=the_prod_database # Optionally specify DB name here
    volumes:
      # Persist database data using a named volume
      - mongo_prod_data:/data/db
    restart: unless-stopped
    networks:
      - todo-prod-network
    # No ports exposed directly unless needed for external admin/backup

  # Redis Cache/Data Service
  redis:
    image: redis:alpine
    container_name: todo-redis-prod
    # Optional: Configure Redis persistence (e.g., AOF or RDB snapshotting)
    # command: redis-server --appendonly yes
    volumes:
      # Persist Redis data using a named volume
      - redis_prod_data:/data
    restart: unless-stopped
    networks:
      - todo-prod-network
    # No ports exposed directly

# Define the network for production services
networks:
  todo-prod-network:
    driver: bridge

# Declare named volumes for persistent data storage
volumes:
  mongo_prod_data:
  redis_prod_data:
