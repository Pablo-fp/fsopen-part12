version: '3.8'

services:
  # Backend service configured for development
  backend-dev:
    # Build the image using the specific dev Dockerfile
    build:
      context: . # Use current directory as context
      dockerfile: dev.Dockerfile # Specify the dev Dockerfile
    container_name: todo-backend-dev-container
    ports:
      # Map host port 3000 to container port 3000
      - '3000:3000'
    volumes:
      # Mount current directory (.) on the host to /usr/src/app in the container
      - ./:/usr/src/app
      # Use a named volume for node_modules to avoid host conflicts
      - backend_node_modules:/usr/src/app/node_modules
    environment:
      # --- Correct URLs for connecting to other services within this compose file ---
      # 'redis' is the service name defined below. 6379 is the default Redis port (internal).
      - REDIS_URL=redis://redis:6379
      # 'mongo' is the service name. Use internal port 27017.
      # Include credentials defined in the 'mongo' service environment.
      # Use 'the_database' or your chosen DB name. 'authSource=admin' is often needed.
      - MONGO_URL=mongodb://root:example@mongo:27017/the_database?authSource=admin
      # Enable verbose logging for Nodemon (optional)
      - NODE_ENV=development
    depends_on:
      # Ensure mongo and redis containers are started before the backend
      - mongo
      - redis
    # Keep container running interactively for Nodemon
    stdin_open: true
    tty: true

  # MongoDB service (mostly unchanged, port mapping kept for host access)
  mongo:
    image: mongo:latest
    container_name: todo-mongo-dev # Ensure consistent naming
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
    volumes:
      # Using a named volume is generally preferred over bind mount for DB data
      - mongo_data_dev:/data/db
      # - ./mongo_data_dev:/data/db # Old bind mount - keep if preferred
    ports:
      # Kept for potential direct access from host (e.g., Mongo Compass)
      - '127.0.0.1:27017:27017'
    restart: unless-stopped

  # Redis service (mostly unchanged, port mapping kept for host access)
  redis:
    image: redis:alpine
    container_name: todo-redis-dev # Ensure consistent naming
    ports:
      # Kept for potential direct access from host (e.g., redis-cli)
      - '127.0.0.1:6379:6379'
    restart: unless-stopped
    volumes:
      # Using named volume for persistence
      - redis_data_dev:/data

# Declare named volumes
volumes:
  backend_node_modules:
  mongo_data_dev:
  redis_data_dev:
