version: '3.8'

services:
  frontend-dev:
    # Use a standard Node.js image suitable for development
    image: node:18-alpine
    container_name: todo-frontend-dev-container # Optional: Assign a specific container name

    # Set the working directory inside the container
    working_dir: /app

    # Environment variables needed by the Vite dev server
    environment:
      # Instructs Vite/React app where the backend is.
      # 'host.docker.internal' is a special DNS name on Docker Desktop (Mac/Win)
      # that resolves to the host machine's IP address.
      # Use '172.17.0.1' (default bridge gateway) or adjust if needed for Linux.
      - VITE_BACKEND_URL=http://host.docker.internal:3000
      # Ensures Vite picks up changes correctly when run in a container
      - CHOKIDAR_USEPOLLING=true

    # Map the host port (e.g., 5173) to the container port Vite uses
    ports:
      - '5173:5173'

    # Volumes for live development:
    volumes:
      # Mount the current directory (.) on the host to /app in the container
      - ./:/app
      # Mount a named volume for node_modules.
      # This prevents the host's node_modules (if any) from overwriting
      # the container's node_modules and avoids potential OS conflicts.
      # Dependencies will be installed inside this volume within the container.
      - frontend_node_modules:/app/node_modules

    # The command to start the Vite development server (from package.json)
    # Note: If node_modules doesn't exist in the volume on first run,
    # this might fail. Run 'docker compose -f docker-compose.dev.yml run --rm frontend-dev npm install' first if needed.
    command: ['npm', 'run', 'dev', '--', '--host']
    # '--host' makes Vite listen on 0.0.0.0 inside the container, making it accessible via the mapped port.

    # Keep stdin open, and allocate a pseudo-TTY
    # Helps keep the development server running interactively
    stdin_open: true
    tty: true

# Declare the named volume for node_modules persistence
volumes:
  frontend_node_modules:
